import sys
import cv2
import numpy as np
import torch
lowThreshold = 30
max_lowThreshold = 100
ratio = 3
kernel_size = 3

def extract(img,threshold):
    img_all=[]
    for j in range(img.size(0)):

        img_cv=img[j].mul(255).numpy()
        img_cv=img_cv.transpose(1, 2, 0).astype( np.uint8 )
        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        out2 = threshold(threshold, img_cv,gray)
        img_all.append(out2)
    cv_all = torch.stack(img_all, dim=0)
    return  cv_all

def CannyThreshold(lowThreshold,img_cv,gray):
    detected_edges = cv2.GaussianBlur(gray, (3, 3), 0)
    detected_edges = cv2.Canny(detected_edges,
                               lowThreshold,
                               lowThreshold * ratio,
                               apertureSize=kernel_size)
    dst = cv2.bitwise_and(img_cv, img_cv, mask=detected_edges)  # just add some colours to edges from original image.
    dst = dst.transpose(2, 0, 1)
    out = torch.from_numpy(dst)
    return out











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































